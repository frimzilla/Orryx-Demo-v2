name: Build Android Internal APK (EAS)

on:
  workflow_dispatch:

jobs:
  build-android-internal:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Find where package.json lives (works even if nested)
      - name: Detect project directory
        id: detect
        run: |
          set -e
          FILE=$(git ls-files -- ':/*package.json' | head -n1 || true)
          if [ -z "$FILE" ]; then
            echo "::error::package.json not found anywhere in repo."
            exit 1
          fi
          DIR=$(dirname "$FILE")
          echo "PROJECT_DIR=$DIR" >> $GITHUB_ENV
          echo "Detected project dir: $DIR"
          ls -la "$DIR"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # ✅ Install & login using official Expo action (adds EAS CLI to PATH and authenticates)
      - name: Setup Expo/EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      # Diagnostics so we always see what's available
      - name: Print environment & EAS versions
        run: |
          echo "Node: $(node -v)"
          echo "NPM : $(npm -v)"
          (eas --version && which eas) || echo "Global 'eas' not found; will use npx fallback."

      - name: Install dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: npm install --no-audit --no-fund

      - name: Validate required assets
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -e
          for f in assets/icon.png assets/adaptive-icon.png assets/splash.png; do
            if [ ! -s "$f" ]; then
              echo "::error file=$f::Missing or empty. Provide a real PNG."
              exit 1
            fi
            mime=$(file -b --mime-type "$f" || true)
            echo "$f -> $mime"
            echo "$mime" | grep -q "image/png" || { echo "::error file=$f::Not a PNG"; exit 1; }
          done

      - name: Expo Doctor
        working-directory: ${{ env.PROJECT_DIR }}
        run: npx --yes expo-doctor

      # ✅ Hybrid build: if global 'eas' is present it works; otherwise npx fetches CLI
      - name: EAS Build (Android internal APK)
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          (eas --version && eas build -p android --profile internal --non-interactive) \
          || npx --yes eas-cli@latest build -p android --profile internal --non-interactive

      - name: Download latest build artifact
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          mkdir -p dist
          (eas --version && eas build:download --platform android --latest --output dist/) \
          || npx --yes eas-cli@latest build:download --platform android --latest --output dist/

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: orryx-internal-apk
          path: ${{ env.PROJECT_DIR }}/dist/*.apk
